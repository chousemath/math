// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");

var pi = 4.0 * Math.atan(1.0);

function safeValue(value) {
  if (value < 0.0) {
    return 0.0;
  } else {
    return value;
  }
}

function areaCircle(radius) {
  var safeRadius = safeValue(radius);
  return pi * safeRadius * safeRadius;
}

function areaParallelogram(base, height) {
  return safeValue(base) * safeValue(height);
}

function areaRectangle(length, width) {
  return safeValue(length) * safeValue(width);
}

function areaSquare(side) {
  var safeSide = safeValue(side);
  return safeSide * safeSide;
}

function areaTrapezoid(base1, base2, height) {
  return 0.5 * (safeValue(base1) + safeValue(base2)) * safeValue(height);
}

function areaTriangle(base, height) {
  return 0.5 * safeValue(base) * safeValue(height);
}

function perimeterCircle(radius) {
  return 2.0 * pi * safeValue(radius);
}

function perimeterRectangle(length, width) {
  return 2.0 * safeValue(length) + 2.0 * safeValue(width);
}

function perimeterSquare(side) {
  return 4.0 * safeValue(side);
}

function perimeterTriangle(side1, side2, side3) {
  var mappedArray = $$Array.map(safeValue, /* array */[
        side1,
        side2,
        side3
      ]);
  var match = $$Array.fold_left((function (x, y) {
          return x * y;
        }), 1.0, mappedArray);
  if (match !== 0.0) {
    return $$Array.fold_left((function (x, y) {
                  return x + y;
                }), 0.0, mappedArray);
  } else {
    return $$Array.fold_left((function (x, y) {
                  if (x > y) {
                    return x;
                  } else {
                    return y;
                  }
                }), 0.0, mappedArray);
  }
}

function removeNegatives(values) {
  return values.filter((function (x) {
                return x > 0.0;
              }));
}

function removePositives(values) {
  return values.filter((function (x) {
                return x < 0.0;
              }));
}

function surfaceAreaCube(side) {
  var safeSide = safeValue(side);
  return 6.0 * safeSide * safeSide;
}

function surfaceAreaCylinder(radius, height) {
  return 2.0 * pi * safeValue(radius) * safeValue(height);
}

function surfaceAreaSphere(radius) {
  var safeRadius = safeValue(radius);
  return 4.0 * pi * safeRadius * safeRadius;
}

function volumeCube(side) {
  var safeSide = safeValue(side);
  return safeSide * safeSide * safeSide;
}

exports.pi = pi;
exports.safeValue = safeValue;
exports.areaCircle = areaCircle;
exports.areaParallelogram = areaParallelogram;
exports.areaRectangle = areaRectangle;
exports.areaSquare = areaSquare;
exports.areaTrapezoid = areaTrapezoid;
exports.areaTriangle = areaTriangle;
exports.perimeterCircle = perimeterCircle;
exports.perimeterRectangle = perimeterRectangle;
exports.perimeterSquare = perimeterSquare;
exports.perimeterTriangle = perimeterTriangle;
exports.removeNegatives = removeNegatives;
exports.removePositives = removePositives;
exports.surfaceAreaCube = surfaceAreaCube;
exports.surfaceAreaCylinder = surfaceAreaCylinder;
exports.surfaceAreaSphere = surfaceAreaSphere;
exports.volumeCube = volumeCube;
/* pi Not a pure module */
