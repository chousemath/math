// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");

var pi = 4.0 * Math.atan(1.0);

function safe(value) {
  if (value < 0.0) {
    return 0.0;
  } else {
    return value;
  }
}

function mult(x, y) {
  return x * y;
}

function areaCircle(r) {
  return $$Array.fold_left(mult, pi, $$Array.map(safe, /* array */[
                  r,
                  r
                ]));
}

function areaParallelogram(b, h) {
  return $$Array.fold_left(mult, 1.0, $$Array.map(safe, /* array */[
                  b,
                  h
                ]));
}

function areaRectangle(len, w) {
  return $$Array.fold_left(mult, 1.0, $$Array.map(safe, /* array */[
                  len,
                  w
                ]));
}

function areaSquare(s) {
  return $$Array.fold_left(mult, 1.0, $$Array.map(safe, /* array */[
                  s,
                  s
                ]));
}

function areaTrapezoid(b1, b2, h) {
  return 0.5 * (safe(b1) + safe(b2)) * safe(h);
}

function areaTriangle(b, h) {
  return $$Array.fold_left(mult, 0.5, $$Array.map(safe, /* array */[
                  b,
                  h
                ]));
}

function distanceTwoPoints(x1, y1, x2, y2) {
  var xdiff = x2 - x1;
  var ydiff = y2 - y1;
  return Math.sqrt(xdiff * xdiff + ydiff * ydiff);
}

function perimeterCircle(r) {
  return 2.0 * pi * safe(r);
}

function perimeterRectangle(len, w) {
  return $$Array.fold_left((function (x, y) {
                return x + y;
              }), 0.0, $$Array.map((function (x) {
                    return 2.0 * safe(x);
                  }), /* array */[
                  len,
                  w
                ]));
}

function perimeterSquare(s) {
  return 4.0 * safe(s);
}

function perimeterTriangle(s1, s2, s3) {
  var mappedArray = $$Array.map(safe, /* array */[
        s1,
        s2,
        s3
      ]);
  var match = $$Array.fold_left(mult, 1.0, mappedArray);
  if (match !== 0.0) {
    return $$Array.fold_left((function (x, y) {
                  return x + y;
                }), 0.0, mappedArray);
  } else {
    return $$Array.fold_left((function (x, y) {
                  if (x > y) {
                    return x;
                  } else {
                    return y;
                  }
                }), 0.0, mappedArray);
  }
}

function removeNegatives(values) {
  return values.filter((function (x) {
                return x > 0.0;
              }));
}

function removePositives(values) {
  return values.filter((function (x) {
                return x < 0.0;
              }));
}

function slope(x1, y1, x2, y2) {
  return (y2 - y1) / (x2 - x1);
}

function surfaceAreaCube(s) {
  return $$Array.fold_left(mult, 6.0, $$Array.map(safe, /* array */[
                  s,
                  s
                ]));
}

function surfaceAreaCylinder(r, h) {
  return $$Array.fold_left(mult, 2.0 * pi, $$Array.map(safe, /* array */[
                  r,
                  h
                ]));
}

function surfaceAreaSphere(r) {
  return $$Array.fold_left(mult, 4.0 * pi, $$Array.map(safe, /* array */[
                  r,
                  r
                ]));
}

function volumeCone(r, h) {
  return $$Array.fold_left(mult, pi / 3.0, $$Array.map(safe, /* array */[
                  r,
                  r,
                  h
                ]));
}

function volumeCube(s) {
  return $$Array.fold_left(mult, 1.0, $$Array.map(safe, /* array */[
                  s,
                  s,
                  s
                ]));
}

function volumeCylinder(r, h) {
  return $$Array.fold_left(mult, pi, $$Array.map(safe, /* array */[
                  r,
                  r,
                  h
                ]));
}

function volumeRectangularContainer(len, w, h) {
  return $$Array.fold_left(mult, 1.0, $$Array.map(safe, /* array */[
                  len,
                  w,
                  h
                ]));
}

function volumeRightCircularCylinder(r, h) {
  return $$Array.fold_left(mult, pi, $$Array.map(safe, /* array */[
                  r,
                  r,
                  h
                ]));
}

function volumeSquarePyramid(b, h) {
  return $$Array.fold_left(mult, 1.0 / 3.0, $$Array.map(safe, /* array */[
                  b,
                  b,
                  h
                ]));
}

function volumeSphere(r) {
  return $$Array.fold_left(mult, 4.0 * pi / 3.0, $$Array.map(safe, /* array */[
                  r,
                  r,
                  r
                ]));
}

exports.pi = pi;
exports.safe = safe;
exports.mult = mult;
exports.areaCircle = areaCircle;
exports.areaParallelogram = areaParallelogram;
exports.areaRectangle = areaRectangle;
exports.areaSquare = areaSquare;
exports.areaTrapezoid = areaTrapezoid;
exports.areaTriangle = areaTriangle;
exports.distanceTwoPoints = distanceTwoPoints;
exports.perimeterCircle = perimeterCircle;
exports.perimeterRectangle = perimeterRectangle;
exports.perimeterSquare = perimeterSquare;
exports.perimeterTriangle = perimeterTriangle;
exports.removeNegatives = removeNegatives;
exports.removePositives = removePositives;
exports.slope = slope;
exports.surfaceAreaCube = surfaceAreaCube;
exports.surfaceAreaCylinder = surfaceAreaCylinder;
exports.surfaceAreaSphere = surfaceAreaSphere;
exports.volumeCone = volumeCone;
exports.volumeCube = volumeCube;
exports.volumeCylinder = volumeCylinder;
exports.volumeRectangularContainer = volumeRectangularContainer;
exports.volumeRightCircularCylinder = volumeRightCircularCylinder;
exports.volumeSquarePyramid = volumeSquarePyramid;
exports.volumeSphere = volumeSphere;
/* pi Not a pure module */
